--->
docker run -d --name "nginxcontainer" -p 8080:80 nginx:latest
docker ps -a
docker rm -f nginxcontainer
docker exec -it 3dd7dd4b537f sh
docker logs containerId
docker run -d --name "nginxcontainer" -p 8081:80 -v "D:/codes Practice/learning/texts-20230226T192047Z-001/texts/index.html:/usr/share/nginx/html/index.html" nginx:latest
--> run below command where your dockerfile is present and is for creating the image
docker build -t backend-micro001 .
--> with no cache
docker build -t backend-micro001 --no-cache .
backend-main
docker run --name "backend-main" -d -p 8080:8080 backend-main:latest
docker tag backend-main rajji01/backend-micro001
docker run --name "backend001" -d -p 8080:8080 backend-micro001:latest
docker build -t backend-micro002 --no-cache .
docker run --name "backend002" -d -p 8081:8081 backend-micro002:latest
docker ps -aq
docker rm -f containerId

---> push your local image
docker tag backend-micro001 rajji01/backend-micro001
docker push rajji01/backend-micro001
docker tag backend-micro002 rajji01/backend-micro002
docker push rajji01/backend-micro002
docker login

-->get all pods for all namespaces
kubectl get pods -A


---> port forwarding and accessing your application
kubectl run hello-world01 --image=rajji01/backend-micro001:latest --port=8080
kubectl port-forward pod/hello-world01 8080:8080
kubectl port-forward  hello-world0001 8080:8080


--->for logs and following logs
kubectl  logs hello-world
kubectl  logs hello-world -f

kubectl logs hello-world0001 -c hello-world0001

------>port-forward in deployment
kubectl port-forward deployment/hello-world 8081:8080


------>kubernetes
k get po
k exec -it nginx bash
kubectl apply -f fist-pod.yaml
k delete po podname
k delete po manifestyaml -n namespace
kubectl delete -f fist-pod.yaml -n default
kubectl describe po podname -n default

# delete all pods
k delete po --all

#for multiple container
k -n dop exec -it podname --container container-name bash

#namespaces
k get namespaces/ k get ns
k create ns testing
kubectl delete ns testing


#service
k get svc -n namespsace
kubectl describe svc -n namespace service-name
kubectl delete svc nginx-service
kubectl describe svc service-name

k logs -n podname

//for multiple pods having same selector
k logs --selector=app=nginx-testing


###for complete definition
kubectl get po -n default nginx -o yaml | less
kubectl get po -n default nginx -o json | less


#

#For getting the endpoints of services
kubectl get endpoints
kubectl get ep


####->
>kubectl port-forward deploy/hello-world 8080:8080


---> to test your node port service now in minikube
if you have multiple node take one ip of it
or you can do like this
minikube ssh
now
curl localhost:nodeport_port_present_in_service:/api/m1
for multiple minikube nodes you can type other ip instead of localhost and rest will also work same

other way of accessing the nodeport service
minikube service backend-service --url
this will provideone url append your api path it will also work
http://127.0.0.1:64879/api/m2


---> minikube load balancer
minikube tunnel
now get svc then external ip will be assigned
now use that ip and with port and api path you can open the endpoint
http://127.0.0.1:8080/api/m3

---> show pods with labels
kubectl get po --show-labels

---> apply all yamls in folder
kubectl apply -f .

---> apply filtering on basis of selector
kubectl get po --selector="app=hello-world"
kubectl get po --selector="tier=backend,app=hello-world"
kubectl get po -l tier=backend,app=hello-world

--->another way to access you pod/deploymnet using service name only
minikube service nameofservice

##for selectors all labels have to match

---> not working this way
kubectl get pods -l 'env in (test)'
kubectl get pods -l 'env notin (test)'
error: name cannot be provided when a selector is specified

--> below command is executed from inside of pod by using ssh
kubectl exec -it pod-name  -- sh
nslookup service_name


--> add curl in minikube when inside of pod
apk add curl
## below inside pod using service name
http://helper-service:8088/api2/m2
## below inside pod using dns name (nslookup service_name)
curl http://helper-service.default.svc.cluster.local:8088/api2/m2



 sudo sh -c "echo 'Hello pv a& pvc' > /mnt/data/index.html"
docker@minikube:~$ cat /mnt/data/index.html

--> for multiple containers inside one specific container
kubectl exec -it pod_name -c container_name_from_yaml  -- sh


--->create namespace
kubectl create namespace engineering


--->
kubectl api-resources
kubectl get pv


--->create secret
kubectl create secret generic mysecret --from-literal=db-password=123 --from-literal=api-token=token
when inside the secret pod use
env you will see the AMIGOSCODE_SECRET value as mentioned in the file secret-data
because we created secreet from file also
now inside etc
cd etc
cd secrets you can see api-token and db-password
cat api-token
cat db-password you will see value appended see clearly you idiot
if you want to get the secret value here in shell of pod  only then you can
echo dGhpcyBpcyBzZWNyZXQ= | base64 -d


--> for communication between two different namespaces we can communicate via
service.namespace


https://github.com/amigoscode/kubernetes/blob/main/yamls/cron-job.yaml
https://earthly.dev/blog/kubernetes-jobs-cron-jobs/
